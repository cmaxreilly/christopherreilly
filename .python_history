_HiStOrY_V2_
exit
exit()
pip
exit()
jupyter\040notebook
exit()
help
exit()
import\040live
import\040random
set\040=\040live.Set()
import\040live
set\040=\040live.Set
set
exit()
help
help()
math
quit()
quit
1\040+\0401
+\040100
1\040+\0401\040+\0401
60/400
60/400\040+\040500
percentage
percent
1000000000000+\0401000000000000
quit
quit()
edali
exit
exit()
1550/25
62*15
1000/62
1000/15
pip
exit()
running_times\040=\040(10,\0403,\0405,\04030,\0405,\0405,\0403,\04017,\0403)\040
print(sum(running_times))
exit()
list(range(0,\04011))
list(range(0,\04012))
number_list\040=\040list(range(0,\04012))
tone_row\040=\040[]
for\040number\040in\040number_list:
tone_row.append(number)
my_test_list\040=\040[1,\0402,\0403]
print\040my_test_list
print(my_test_list)
my_test_list.reverse
print(my_test_list)
reverse\040=\040my_test_list.reverse
print(reverse)
list.reverse(my_test_list)
print(my_test_list)
exit()
pip
exit()
print()
/usr/local/bin/python3 /Users/christopherreilly/Documents/the_vault/Code/tone_row_maximalism/dicking_the_command_line.py
exit()
total=1000
grades = (100, 150, 150, 100, 100, 100, 50)
sum(grades)
1500/1900
exit()
6 * 12 * 5 * 3
1080/5
cf = 6
cf
keys = 12
keys
species = 5
voicings = 9
keys * cf * species * voicings
3240/5
648/365
648/30
exit()
def maps_of_meaning_selector(range):
ls
exit()
22344 + 30288 + 33493 + 30093 + 30093 + 30093 + 30093 + 30093
total_cost = 236590
total_cost
total_cost.type
total_cost.type()
type(total_cost)
exit()
4500 * 58.85
exit()
Miranda = 100 + 80 + 50 + 100 + 80 + 60 + 100 + 70 + 60 + 100 + 80
print Miranda
print(Miranda)
exit()
total = 400 + 184.70 + 92.35 + 221.82
deposit = total * .2
print deposit
print(deposit)
exit()
exit
exit()
income = [150, 92.35]
print income
print(income)
income.append[273]
append.income[273]
income.append(273)
print(income)
income.append(63.13)
print(income)
deposit_amount = 0.2 * sum(income)
print deposit_amount
print(deposit_amount)
print(round(deposit_amount, 2))
exit()
income = [150, 92.35, 273, 63.13]
print(income)
print(round((0.2 * sum(income)), 2)
exit()
import accounting_formulas
income.append(1)
print(deposit_amount(90))
from accounting_formulas import *
print(income)
income.append(1000)
deposit_amount(income)
exit()
from accounting_formulas import *
deposit_amount(income)
income.append(1000)
deposit_amount(income)
exit()
from acounting_formulas import *
exit()
from accounting_formulas import *
income
income.append(1000)
income.append(3000)
income.append(5000)
income
deposit_amount(income)
exit()
from accounting_formulas import *
income
income.append(1000)
income
income.append(3000)
income
deposit_amount(income)
exit()
income
exit()
income
exit
exit()
from accounting_formulas import *
exit()
from accounting_formulas import *
income
income.append(1000)
income.append(500)
income.append(200)
income
deposit_amount(income)
exit()
from accounting_formulas import *
income
income.append(
)
exit
exit()
1860/12
exit
exit()
from accounting_formulas import *
income.append(400)
income.append(180)
income.append(80)
deposit_amount(income)
exit
from accounting_formulas import *
income.append(180)
income.append(225)
income.append(67.5)
income
deposit_amount(income)
exit()
from accounting_formulas import *
income.append(220)
income.append(3191)
income
deposit_amount(income)
exit()
copyright
credits
license
license()
import numpy as np
a = np.arange(15).reshape(3, 5)
a
a.shape
a = np.arange(15)
a
a = np.arange(15).reshape(5, 3)
a
a.ndim
a.dtype.name
a.dtype
a.itemsize
a.size
type(a)
b = np.array([6,7,8])
b
type(b)
exit()
import numpy as np
a = np.array(1,2,3,4)
np.zeros((400, 500))
np.ones((2, 3, 4, 5), dtype=np.int16)
np.empty((2, 3))
np.arrange(10, 30, 5)
np
np.arange(10, 30, 5)
rang (10, 30, 5)
range (10, 30, 5)
print(np.arange(10000))
print(np.arange(10000).reshape(100, 100))
clear
a = np.array([20, 30, 40, 50]}
a = np.array([20, 30, 40, 50])
b = np.arange(4)
b
c = a - b
c
b**2
1- * np.sin(a)
10 * np.sin(a)
a < 35
date
a = np.arange(15).reshape(3,5)
b = np.arange(15).reshape(5,3)
a @ b
a * b
a
b
a @ b
b @ a
a = array([[3,4], [7,2], [5, 9]]
)
a = np.array([[3,4], [7,2], [5, 9]]
)
a
b = np.array([[3,1,5], [6,9,7]])
b
a @ b
b @ a
	exit()
exit()
import accounting_formulas
import accounting_formulas as af
af.income.append(75)
income
af.income
af.income.append(100)
af.income.append(400)
af.income.append(750)
af.income.append(319.01)
af.income.append(164.15)
af.income.append(336.87)
af.income.append(63.12)
af.deposit_amount(af.income)
af.income.append(600)
af.deposit_amount(af.income)
exit()
import accouting_formulas as ac
import accounting_formulas as ac
ac.income.append(120.33)
ac.deposit_amount(ac.income)
exit()
list(range(9))
list(range(900))
clear
exit()
list(range(9))
exit()
False +1
False -1
False +5
True - False
exit()
import stdio
dir(stdio)
exit()
import stdio
lib(stdio)
dir(stdio)
dir(stdio.__builtins__)
exit()
import stdio
ext()
exit()
r_per_mile = 0.5
home_delta = 41.3
home_delta_round = home_delta * 2
home_montrose = 61.7
home_montrose_round = home_montrose * 2
hdelreimburse = r_per_mile * home_delta_round
hmonreimburse = r_per_mile * home_montrose_round
hmonreimburse
hdelreimburse
home_montrose_round
exit
exit()
from PyPDF2 import PdfFileReader
from pathlib import Path
pdf_path = (
Path.home()
/"Documents"
/"work_and_gigs"
/"snoopy_the_musical"
/"python_test"
)
pdf_path
pdf_path = (
Path.home()
/"Documents"
/work_and_gigs
/snoopy_the_musical
/python_test
/snoopy_conductor.pdf
)
exit()
180 + 90
exit()
import PyLive
import pylive
exit()
import pylive
exit()
import pylive
import PyLive
import live
pydoc live
print live.__doc__
print(live.__doc__)
exit()
import live
import random
set = live.Set()
set.scan(scan_clip_names = True, scan_devices = True)
brew search liveosc
exit()
import os
os.system("open /Applications/Safari.app")
os.system("open -a safari")
os.system("ls")
os
os.system("cd Documents/work_and_gigs; ls")
os.system("cd ..")
ls
os.system("ls")
exit()
ls
cd
alksdf
import os
os.system("ls")
os.system("pwd")
exit()
flip.py
import flip.py
from . import flip
from flip import .
from flip import *
flip.__doc__
flip
exit()
from datetime import datetime
dt = datetime.now()
print('Datetime is:', dt)
x = dt.weekday()
print('Day of the week is:', x)
exit()
12 * 4
ls
exit()
from datetime import datetime
dt = datetime.now()
dt
dayweek = dt.weekday()
dayweek
ls
exit
exit()
